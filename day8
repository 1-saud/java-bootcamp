import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class day8 {
    public static void main(String[] args) {


        //Q1
//        String[] words = {"cat", "dog", "red", "is", "am"};
//        int maxLength = 0;
//
//        for (String word : words) {
//            if (word.length() > maxLength) {
//                maxLength = word.length();
//            }
//        }
//
//        System.out.println("Longest words:");
//        for (String word : words) {
//            if (word.length() == maxLength) {
//                System.out.println(word);
//            }
//        }

        //Q2
//        int[] numbers = {1, 1, 1, 3, 3, 5};
//        HashMap<Integer, Integer> countMap = new HashMap<>();
//
//        for (int num : numbers) {
//            countMap.put(num, countMap.getOrDefault(num, 0) + 1);
//        }
//
//        for (int key : countMap.keySet()) {
//            System.out.println(key + " occurs " + countMap.get(key) + " times");
//        }
//
//        int check = 9;
//        System.out.println(check + " occurs " + countMap.getOrDefault(check, 0) + " time");


        //Q3
//        int[] arr = {1, 4, 17, 7, 25, 3, 100};
//
//        Scanner input = new Scanner(System.in);
//        System.out.print("Enter value of k: ");
//        int k = input.nextInt();
//
//        Arrays.sort(arr);
//
//        System.out.println(k + " largest elements of the array are:");
//        for (int i = arr.length - 1; i >= arr.length - k; i--) {
//            System.out.print(arr[i] + " ");
//        }

        //Q4
//        int[] numbers = {5, 4, 3, 2, 1};
//
//        System.out.println("Original Array:");
//        for (int n : numbers) {
//            System.out.print(n + " ");
//        }
//
//        reverse(numbers);
//
//        System.out.println("\nReversed Array:");
//        for (int n : numbers) {
//            System.out.print(n + " ");
//        }

        //Q6
//        Scanner input = new Scanner(System.in);
//        int[] arr = new int[100];
//        int size = 0;
//
//        while (true) {
//            System.out.println("\n=== Menu ===");
//            System.out.println("1. Accept elements of array");
//            System.out.println("2. Display elements of array");
//            System.out.println("3. Search an element in array");
//            System.out.println("4. Sort the array");
//            System.out.println("5. Stop");
//            System.out.print("Enter your choice: ");
//            int choice = input.nextInt();
//
//            switch (choice) {
//                case 1:
//                    System.out.print("Enter size of array: ");
//                    size = input.nextInt();
//                    System.out.println("Enter elements:");
//                    for (int i = 0; i < size; i++) {
//                        arr[i] = input.nextInt();
//                    }
//                    break;
//
//                case 2:
//                    System.out.println("Array elements are:");
//                    for (int i = 0; i < size; i++) {
//                        System.out.print(arr[i] + " ");
//                    }
//                    System.out.println();
//                    break;
//
//                case 3:
//                    System.out.print("Enter element to search: ");
//                    int key = input.nextInt();
//                    boolean found = false;
//                    for (int i = 0; i < size; i++) {
//                        if (arr[i] == key) {
//                            System.out.println(key + " found at position " + (i + 1));
//                            found = true;
//                            break;
//                        }
//                    }
//                    if (!found)
//                        System.out.println(key + " not found!");
//                    break;
//
//                case 4:
//                    Arrays.sort(arr, 0, size);
//                    System.out.println("Array sorted successfully!");
//                    break;
//
//                case 5:
//                    System.out.println("Program stopped.");
//                    return;
//
//                default:
//                    System.out.println("Invalid choice! Try again.");
//            }
//        }

        //Q7
//        Scanner in = new Scanner(System.in);
//        System.out.print("Enter a password: ");
//        String pwd = in.nextLine();
//
//        int totalScore = checkLength(pwd)
//                + checkSpecialCharacters(pwd)
//                + checkUpperCaseLowerCase(pwd);
//
//        System.out.println("Total score = " + totalScore);
//
//        if (totalScore >= 8) {
//            System.out.println("Password is strong.");
//        } else if (totalScore >= 5) {
//            System.out.println("Password is moderately strong.");
//        } else {
//            System.out.println("Password is weak.");
//        }
//
//        in.close();

        //Q8
        Scanner input = new Scanner(System.in);

        System.out.print("Enter the number of Fibonacci terms to generate: ");
        int terms = input.nextInt();

        System.out.println("Fibonacci sequence with " + terms + " terms:");
        generateFibonacci(terms);

        input.close();
    }

    public static void generateFibonacci(int n) {
        int first = 0, second = 1;

        for (int i = 1; i <= n; i++) {
            System.out.print(first + " ");
            int next = first + second;
            first = second;
            second = next;
        }
    }

    public static int checkLength(String s) {
        int n = s.length();
        if (n <= 5) return 0;
        if (6 <= n && n <= 7) return 2;
        return 3; // 8 or more
    }

    public static int checkSpecialCharacters(String s) {
        for (char c : s.toCharArray()) {
            if (!Character.isLetterOrDigit(c)) {
                return 2;
            }
        }
        return 0;
    }

    public static int checkUpperCaseLowerCase(String s) {
        boolean hasUpper = false, hasLower = false;
        for (char c : s.toCharArray()) {
            if (Character.isUpperCase(c)) hasUpper = true;
            if (Character.isLowerCase(c)) hasLower = true;
            if (hasUpper && hasLower) return 3;
        }
        return 0;
    }

    public static void reverse(int[] arr) {
        int start = 0;
        int end = arr.length - 1;

        while (start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;

            start++;
            end--;
        }
    }
}
